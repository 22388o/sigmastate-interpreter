digraph "crowdFunding_Case" {
concentrate=true
node [style=filled, fillcolor=orangered]

"s1290" [
label="s1290: Long = Const(100l)"
shape=box, color=gray, tooltip="s1290:Long", style=filled, fillcolor=white
]
"s13263" [
label="s13263: Long = Const(1000l)"
shape=box, color=gray, tooltip="s13263:Long", style=filled, fillcolor=white
]
"s13244" [
label="s13244: WECPoint = ECPoint(352898,752879,...)"
shape=box, color=gray, tooltip="s13244:WECPoint", style=filled, fillcolor=white
]
"s13248" [
label="s13248: ProveDlogEvidence = ProveDlogEvidenceCtor(s13244)"
shape=box, color=green, tooltip="s13248:ProveDlogEvidence", style=filled, fillcolor=white
]
"s13491" [
label="s13491: Col[Byte] = s13248.SigmaProp.propBytes()"
shape=box, color=darkblue, tooltip="s13491:Col[Byte]", style=filled, fillcolor=white
]
subgraph cluster_s13586 {
style=dashed; color="#FFCCFF"
"s13584" [
label="s13584: Box"
shape=oval, color=gray, tooltip="s13584:Box", style=filled, fillcolor=white
]
"s13586" [
label="s13586: Box => Boolean = s13584 => s13604 && { s13609 }"
shape=box, color=magenta, tooltip="s13586:Box => Boolean", style=filled, fillcolor=white
]
{rank=source; s13584}
"s13594" [
label="s13594: Long = s13584.Box.value()"
shape=box, color=darkblue, tooltip="s13594:Long", style=filled, fillcolor=white
]
"s13604" [
label="s13604: Boolean = s13594 >= s13263"
shape=box, color=gray, tooltip="s13604:Boolean", style=filled, fillcolor=white
]
subgraph cluster_s13609 {
style=dashed; color="#FFCCCC"
"s13609" [
label="s13609: Thunk[Boolean] = Thunk(s13653, [s13611,s13653])"
shape=box, color=red, tooltip="s13609:Thunk[Boolean]", style=filled, fillcolor=white
]
"s13611" [
label="s13611: Col[Byte] = s13584.Box.propositionBytes()"
shape=box, color=darkblue, tooltip="s13611:Col[Byte]", style=filled, fillcolor=white
]
"s13653" [
label="s13653: Boolean = s13611 == s13491"
shape=box, color=gray, tooltip="s13653:Boolean", style=filled, fillcolor=white
]
{rank=sink; s13609}
}
{rank=sink; s13586}
}
"s13202" [
label="s13202: WECPoint = ECPoint(425802,353d2f,...)"
shape=box, color=gray, tooltip="s13202:WECPoint", style=filled, fillcolor=white
]
"s13206" [
label="s13206: ProveDlogEvidence = ProveDlogEvidenceCtor(s13202)"
shape=box, color=green, tooltip="s13206:ProveDlogEvidence", style=filled, fillcolor=white
]
"s28" [
label="s28: TestSigmaDslBuilder = TestSigmaDslBuilderCtor()"
shape=box, color=green, tooltip="s28:TestSigmaDslBuilder", style=filled, fillcolor=white
]
"s3" [
label="s3: ColOverArrayBuilder = ColOverArrayBuilderCtor()"
shape=box, color=green, tooltip="s3:ColOverArrayBuilder", style=filled, fillcolor=white
]
subgraph cluster_s14152 {
style=dashed; color="#FFCCFF"
"s14150" [
label="s14150: Context"
shape=oval, color=gray, tooltip="s14150:Context", style=filled, fillcolor=white
]
"s14152" [
label="s14152: Context => SigmaProp = s14150 => s14211.SigmaProp.||(s15115)"
shape=box, color=magenta, tooltip="s14152:Context => SigmaProp", style=filled, fillcolor=white
]
{rank=source; s14150}
"s14161" [
label="s14161: Long = s14150.Context.HEIGHT()"
shape=box, color=darkblue, tooltip="s14161:Long", style=filled, fillcolor=white
]
"s14169" [
label="s14169: Boolean = s14161 >= s1290"
shape=box, color=gray, tooltip="s14169:Boolean", style=filled, fillcolor=white
]
"s14209" [
label="s14209: TrivialSigma = TrivialSigmaCtor(s14169)"
shape=box, color=green, tooltip="s14209:TrivialSigma", style=filled, fillcolor=white
]
"s14211" [
label="s14211: SigmaProp = s14209.SigmaProp.&&(s13206)"
shape=box, color=darkblue, tooltip="s14211:SigmaProp", style=filled, fillcolor=white
]
"s14277" [
label="s14277: Boolean = s14161 < s1290"
shape=box, color=gray, tooltip="s14277:Boolean", style=filled, fillcolor=white
]
"s14301" [
label="s14301: Col[Box] = s14150.Context.OUTPUTS()"
shape=box, color=darkblue, tooltip="s14301:Col[Box]", style=filled, fillcolor=white
]
"s15082" [
label="s15082: Boolean = s14301.Col.exists(s13586)"
shape=box, color=darkblue, tooltip="s15082:Boolean", style=filled, fillcolor=white
]
"s15111" [
label="s15111: Col[Boolean] =\ls3.ColBuilder.fromItems(ArrayBuffer(s14277, s15082), anon$4<Boolean>)\l"
shape=box, color=darkblue, tooltip="s15111:Col[Boolean]", style=filled, fillcolor=white
]
"s15112" [
label="s15112: Boolean = s28.SigmaDslBuilder.allOf(s15111)"
shape=box, color=darkblue, tooltip="s15112:Boolean", style=filled, fillcolor=white
]
"s15113" [
label="s15113: TrivialSigma = TrivialSigmaCtor(s15112)"
shape=box, color=green, tooltip="s15113:TrivialSigma", style=filled, fillcolor=white
]
"s15115" [
label="s15115: SigmaProp = s15113.SigmaProp.&&(s13248)"
shape=box, color=darkblue, tooltip="s15115:SigmaProp", style=filled, fillcolor=white
]
{rank=sink; s14152}
}
"s5386" [
label="s5386: CostModel = s28.SigmaDslBuilder.CostModel()"
shape=box, color=darkblue, tooltip="s5386:CostModel", style=filled, fillcolor=white
]
"s13173" [
label="s13173: Int = s5386.CostModel.SelectField()"
shape=box, color=darkblue, tooltip="s13173:Int", style=filled, fillcolor=white
]
"s1228" [
label="s1228: Int = CostOf(Const:() => SLong)"
shape=box, color=gray, tooltip="s1228:Int", style=filled, fillcolor=white
]
"s13184" [
label="s13184: Int = s13173 + s1228"
shape=box, color=gray, tooltip="s13184:Int", style=filled, fillcolor=white
]
"s764" [
label="s764: Int = CostOf(ProveDlogEval:(SUnit) => SSigmaProp)"
shape=box, color=gray, tooltip="s764:Int", style=filled, fillcolor=white
]
"s865" [
label="s865: Int = CostOf(SigmaPropIsValid:(SSigmaProp) => SBoolean)"
shape=box, color=gray, tooltip="s865:Int", style=filled, fillcolor=white
]
"s866" [
label="s866: Int = s764 + s865"
shape=box, color=gray, tooltip="s866:Int", style=filled, fillcolor=white
]
"s13221" [
label="s13221: Int = s13184 + s866"
shape=box, color=gray, tooltip="s13221:Int", style=filled, fillcolor=white
]
"s903" [
label="s903: Int = CostOf(BinAnd:(SBoolean,SBoolean) => SBoolean)"
shape=box, color=gray, tooltip="s903:Int", style=filled, fillcolor=white
]
"s13223" [
label="s13223: Int = s13221 + s903"
shape=box, color=gray, tooltip="s13223:Int", style=filled, fillcolor=white
]
"s13326" [
label="s13326: Int = s5386.CostModel.CollectionConst()"
shape=box, color=darkblue, tooltip="s13326:Int", style=filled, fillcolor=white
]
"s13344" [
label="s13344: Int = CostOf(ExtractAmount:(SBox) => SLong)"
shape=box, color=gray, tooltip="s13344:Int", style=filled, fillcolor=white
]
"s13355" [
label="s13355: Int = s13344 + s1228"
shape=box, color=gray, tooltip="s13355:Int", style=filled, fillcolor=white
]
"s13471" [
label="s13471: Int = CostOf(ExtractScriptBytes:(SBox) => Col[SByte])"
shape=box, color=gray, tooltip="s13471:Int", style=filled, fillcolor=white
]
"s13492" [
label="s13492: Int = CostOf(SigmaPropBytes:(SSigmaProp) => Col[SByte])"
shape=box, color=gray, tooltip="s13492:Int", style=filled, fillcolor=white
]
"s13493" [
label="s13493: Int = s764 + s13492"
shape=box, color=gray, tooltip="s13493:Int", style=filled, fillcolor=white
]
"s13538" [
label="s13538: Int = s13471 + s13493"
shape=box, color=gray, tooltip="s13538:Int", style=filled, fillcolor=white
]
"s556" [
label="s556: Long = TypeSize(SByte)"
shape=box, color=gray, tooltip="s556:Long", style=filled, fillcolor=white
]
"s13470" [
label="s13470: Int = Const(65536)"
shape=box, color=gray, tooltip="s13470:Int", style=filled, fillcolor=white
]
"s13551" [
label="s13551: Long = ToLong s13470"
shape=box, color=gray, tooltip="s13551:Long", style=filled, fillcolor=white
]
"s13552" [
label="s13552: Long = s556 * s13551"
shape=box, color=gray, tooltip="s13552:Long", style=filled, fillcolor=white
]
"s13496" [
label="s13496: Int = s13491.Col.length()"
shape=box, color=darkblue, tooltip="s13496:Int", style=filled, fillcolor=white
]
"s13497" [
label="s13497: Long = ToLong s13496"
shape=box, color=gray, tooltip="s13497:Long", style=filled, fillcolor=white
]
"s13498" [
label="s13498: Long = s556 * s13497"
shape=box, color=gray, tooltip="s13498:Long", style=filled, fillcolor=white
]
"s13567" [
label="s13567: Long = s13552 + s13498"
shape=box, color=gray, tooltip="s13567:Long", style=filled, fillcolor=white
]
"s13568" [
label="s13568: Long = Const(1024l)"
shape=box, color=gray, tooltip="s13568:Long", style=filled, fillcolor=white
]
"s13569" [
label="s13569: Long = s13567 / s13568"
shape=box, color=gray, tooltip="s13569:Long", style=filled, fillcolor=white
]
"s13570" [
label="s13570: Int = s13569.toInt"
shape=box, color=gray, tooltip="s13570:Int", style=filled, fillcolor=white
]
"s13571" [
label="s13571: Int = CostOf(EQ_per_kb:(T,T) => SBoolean)"
shape=box, color=gray, tooltip="s13571:Int", style=filled, fillcolor=white
]
"s13572" [
label="s13572: Int = s13570 * s13571"
shape=box, color=gray, tooltip="s13572:Int", style=filled, fillcolor=white
]
"s13573" [
label="s13573: Int = s13538 + s13572"
shape=box, color=gray, tooltip="s13573:Int", style=filled, fillcolor=white
]
"s13577" [
label="s13577: Int = s13355 + s13573"
shape=box, color=gray, tooltip="s13577:Int", style=filled, fillcolor=white
]
"s13579" [
label="s13579: Int = s13577 + s903"
shape=box, color=gray, tooltip="s13579:Int", style=filled, fillcolor=white
]
"s11" [
label="s11: Int = Const(0)"
shape=box, color=gray, tooltip="s11:Int", style=filled, fillcolor=white
]
"s12" [
label="s12: IntPlusMonoid[Int] = IntPlusMonoidCtor(s11)"
shape=box, color=green, tooltip="s12:IntPlusMonoid[Int]", style=filled, fillcolor=white
]
"s14144" [
label="s14144: Int = CostOf(BinOr:(SBoolean,SBoolean) => SBoolean)"
shape=box, color=gray, tooltip="s14144:Int", style=filled, fillcolor=white
]
"s5388" [
label="s5388: Int = s5386.CostModel.AccessBox()"
shape=box, color=darkblue, tooltip="s5388:Int", style=filled, fillcolor=white
]
"s14130" [
label="s14130: Int = CostOf(AND_per_item:(Col[SBoolean]) => SBoolean)"
shape=box, color=gray, tooltip="s14130:Int", style=filled, fillcolor=white
]
subgraph cluster_s15144 {
style=dashed; color="#FFCCFF"
"s15142" [
label="s15142: Context"
shape=oval, color=gray, tooltip="s15142:Context", style=filled, fillcolor=white
]
"s15144" [
label="s15144: Context => Int = s15142 => s16126 + s14144"
shape=box, color=magenta, tooltip="s15144:Context => Int", style=filled, fillcolor=white
]
{rank=source; s15142}
"s15291" [
label="s15291: Col[Box] = s15142.Context.OUTPUTS()"
shape=box, color=darkblue, tooltip="s15291:Col[Box]", style=filled, fillcolor=white
]
"s15293" [
label="s15293: Int = s15291.Col.length()"
shape=box, color=darkblue, tooltip="s15293:Int", style=filled, fillcolor=white
]
"s16085" [
label="s16085: Int = s5388 * s15293"
shape=box, color=gray, tooltip="s16085:Int", style=filled, fillcolor=white
]
"s16086" [
label="s16086: Int = s13326 + s16085"
shape=box, color=gray, tooltip="s16086:Int", style=filled, fillcolor=white
]
"s16093" [
label="s16093: Int = s13579 * s15293"
shape=box, color=gray, tooltip="s16093:Int", style=filled, fillcolor=white
]
"s16094" [
label="s16094: Int = s16086 + s16093"
shape=box, color=gray, tooltip="s16094:Int", style=filled, fillcolor=white
]
"s16108" [
label="s16108: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s13184, s866, s16094), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s16108:Col[Int]", style=filled, fillcolor=white
]
"s16110" [
label="s16110: Int = s16108.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s16110:Int", style=filled, fillcolor=white
]
"s16112" [
label="s16112: Int = s16108.Col.length()"
shape=box, color=darkblue, tooltip="s16112:Int", style=filled, fillcolor=white
]
"s16114" [
label="s16114: Int = s14130 * s16112"
shape=box, color=gray, tooltip="s16114:Int", style=filled, fillcolor=white
]
"s16115" [
label="s16115: Int = s16110 + s16114"
shape=box, color=gray, tooltip="s16115:Int", style=filled, fillcolor=white
]
"s16126" [
label="s16126: Int = s13223 + s16115"
shape=box, color=gray, tooltip="s16126:Int", style=filled, fillcolor=white
]
{rank=sink; s15144}
}
subgraph cluster_s1051 {
style=dashed; color="#FFCCFF"
"s1049" [
label="s1049: Context"
shape=oval, color=gray, tooltip="s1049:Context", style=filled, fillcolor=white
]
"s1051" [
label="s1051: Context => Long = s1049 => TypeSize(SBoolean)"
shape=box, color=magenta, tooltip="s1051:Context => Long", style=filled, fillcolor=white
]
{rank=source; s1049}
{rank=sink; s1051}
}
"s17123" [
label="s17123: {calc: Context => SigmaProp; cost: Context => Int; size: Context => Long} = {calc:s14152; cost:s15144; size:s1051}"
shape=box, color=gray, tooltip="s17123:{calc: Context => SigmaProp; cost: Context => Int; size: Context => Long}", style=filled, fillcolor=white
]
"s17171" [
label="s17171: {calc: Context => SigmaProp} = {calc:s14152}"
shape=box, color=gray, tooltip="s17171:{calc: Context => SigmaProp}", style=filled, fillcolor=white
]
"s15113" -> "s15115" [style=solid]
"s13248" -> "s15115" [style=solid]
"s13326" -> "s16086" [style=solid]
"s16085" -> "s16086" [style=solid]
"s15291" -> "s15293" [style=solid]
"s13584" -> "s13586" [style=dashed, color=lightgray, weight=0]
"s13604" -> "s13586" [style=solid]
"s13609" -> "s13586" [style=solid]
"s14150" -> "s14301" [style=solid]
"s556" -> "s13552" [style=solid]
"s13551" -> "s13552" [style=solid]
"s13221" -> "s13223" [style=solid]
"s903" -> "s13223" [style=solid]
"s13584" -> "s13611" [style=solid]
"s14161" -> "s14277" [style=solid]
"s1290" -> "s14277" [style=solid]
"s14130" -> "s16114" [style=solid]
"s16112" -> "s16114" [style=solid]
"s14152" -> "s17171" [style=solid]
"s13471" -> "s13538" [style=solid]
"s13493" -> "s13538" [style=solid]
"s13594" -> "s13604" [style=solid]
"s13263" -> "s13604" [style=solid]
"s1049" -> "s1051" [style=dashed, color=lightgray, weight=0]
"s14169" -> "s14209" [style=solid]
"s764" -> "s866" [style=solid]
"s865" -> "s866" [style=solid]
"s13202" -> "s13206" [style=solid]
"s13244" -> "s13248" [style=solid]
"s14301" -> "s15082" [style=solid]
"s13586" -> "s15082" [style=solid]
"s13570" -> "s13572" [style=solid]
"s13571" -> "s13572" [style=solid]
"s556" -> "s13498" [style=solid]
"s13497" -> "s13498" [style=solid]
"s13470" -> "s13551" [style=solid]
"s14150" -> "s14152" [style=dashed, color=lightgray, weight=0]
"s14211" -> "s14152" [style=solid]
"s15115" -> "s14152" [style=solid]
"s5386" -> "s13173" [style=solid]
"s3" -> "s16108" [style=solid]
"s13184" -> "s16108" [style=solid]
"s866" -> "s16108" [style=solid]
"s16094" -> "s16108" [style=solid]
"s13344" -> "s13355" [style=solid]
"s1228" -> "s13355" [style=solid]
"s13173" -> "s13184" [style=solid]
"s1228" -> "s13184" [style=solid]
"s16108" -> "s16112" [style=solid]
"s13584" -> "s13594" [style=solid]
"s16110" -> "s16115" [style=solid]
"s16114" -> "s16115" [style=solid]
"s5386" -> "s13326" [style=solid]
"s13577" -> "s13579" [style=solid]
"s903" -> "s13579" [style=solid]
"s3" -> "s15111" [style=solid]
"s14277" -> "s15111" [style=solid]
"s15082" -> "s15111" [style=solid]
"s13567" -> "s13569" [style=solid]
"s13568" -> "s13569" [style=solid]
"s11" -> "s12" [style=solid]
"s13496" -> "s13497" [style=solid]
"s14150" -> "s14161" [style=solid]
"s13653" -> "s13609" [style=solid]
"s15112" -> "s15113" [style=solid]
"s13184" -> "s13221" [style=solid]
"s866" -> "s13221" [style=solid]
"s13552" -> "s13567" [style=solid]
"s13498" -> "s13567" [style=solid]
"s13611" -> "s13653" [style=solid]
"s13491" -> "s13653" [style=solid]
"s15142" -> "s15291" [style=solid]
"s16086" -> "s16094" [style=solid]
"s16093" -> "s16094" [style=solid]
"s28" -> "s15112" [style=solid]
"s15111" -> "s15112" [style=solid]
"s14161" -> "s14169" [style=solid]
"s1290" -> "s14169" [style=solid]
"s14209" -> "s14211" [style=solid]
"s13206" -> "s14211" [style=solid]
"s13248" -> "s13491" [style=solid]
"s5386" -> "s5388" [style=solid]
"s13491" -> "s13496" [style=solid]
"s13538" -> "s13573" [style=solid]
"s13572" -> "s13573" [style=solid]
"s13223" -> "s16126" [style=solid]
"s16115" -> "s16126" [style=solid]
"s13569" -> "s13570" [style=solid]
"s5388" -> "s16085" [style=solid]
"s15293" -> "s16085" [style=solid]
"s28" -> "s5386" [style=solid]
"s15142" -> "s15144" [style=dashed, color=lightgray, weight=0]
"s16126" -> "s15144" [style=solid]
"s14144" -> "s15144" [style=solid]
"s13579" -> "s16093" [style=solid]
"s15293" -> "s16093" [style=solid]
"s13355" -> "s13577" [style=solid]
"s13573" -> "s13577" [style=solid]
"s16108" -> "s16110" [style=solid]
"s12" -> "s16110" [style=solid]
"s14152" -> "s17123" [style=solid]
"s15144" -> "s17123" [style=solid]
"s1051" -> "s17123" [style=solid]
"s764" -> "s13493" [style=solid]
"s13492" -> "s13493" [style=solid]
}
