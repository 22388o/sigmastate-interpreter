digraph "alice_verify" {
concentrate=true
node [style=filled, fillcolor=orangered]

"s84" [
label="s84: Byte = Const(22)"
shape=box, color=gray, tooltip="s84:Byte", style=filled, fillcolor=white
]
"s1047" [
label="s1047: Long = Const(15l)"
shape=box, color=gray, tooltip="s1047:Long", style=filled, fillcolor=white
]
"s28" [
label="s28: TestSigmaDslBuilder = TestSigmaDslBuilderCtor()"
shape=box, color=green, tooltip="s28:TestSigmaDslBuilder", style=filled, fillcolor=white
]
"s461" [
label="s461: WECPoint = s28.SigmaDslBuilder.groupGenerator()"
shape=box, color=darkblue, tooltip="s461:WECPoint", style=filled, fillcolor=white
]
"s1191" [
label="s1191: WECPoint = ECPoint(1f83bc,231c45,...)"
shape=box, color=gray, tooltip="s1191:WECPoint", style=filled, fillcolor=white
]
"s1195" [
label="s1195: ProveDlogEvidence = ProveDlogEvidenceCtor(s1191)"
shape=box, color=green, tooltip="s1195:ProveDlogEvidence", style=filled, fillcolor=white
]
"s647" [
label="s647: WECPoint = ECPoint(3f2934,6eb5f1,...)"
shape=box, color=gray, tooltip="s647:WECPoint", style=filled, fillcolor=white
]
"s1055" [
label="s1055: WECPoint = ECPoint(246f1b,2a7ff6,...)"
shape=box, color=gray, tooltip="s1055:WECPoint", style=filled, fillcolor=white
]
"s1060" [
label="s1060: ProveDlogEvidence = ProveDlogEvidenceCtor(s1055)"
shape=box, color=green, tooltip="s1060:ProveDlogEvidence", style=filled, fillcolor=white
]
"s3" [
label="s3: ColOverArrayBuilder = ColOverArrayBuilderCtor()"
shape=box, color=green, tooltip="s3:ColOverArrayBuilder", style=filled, fillcolor=white
]
"s381" [
label="s381: WArray[Byte] =\lWArrayConst(Array(-49, 8, -51, 7, 3, 102, 89, 45, -116, -7, 1, 113, -106, -86, -120, -80, -94, -73, -52, 77, -29, 56, 101, -122, -72, -106, -114, -20, 76, 55, 48, 100, -59, 57, -75, -18, 36), Liftable(anon$5<Byte>))\l"
shape=box, color=gray, tooltip="s381:WArray[Byte]", style=filled, fillcolor=white
]
"s382" [
label="s382: Col[Byte] = s3.ColBuilder.fromArray(s381)"
shape=box, color=darkblue, tooltip="s382:Col[Byte]", style=filled, fillcolor=white
]
"s509" [
label="s509: Int = Const(6)"
shape=box, color=gray, tooltip="s509:Int", style=filled, fillcolor=white
]
"s66" [
label="s66: Long = Const(60l)"
shape=box, color=gray, tooltip="s66:Long", style=filled, fillcolor=white
]
"s695" [
label="s695: Int = Const(4)"
shape=box, color=gray, tooltip="s695:Int", style=filled, fillcolor=white
]
"s795" [
label="s795: Int = Const(7)"
shape=box, color=gray, tooltip="s795:Int", style=filled, fillcolor=white
]
"s145" [
label="s145: Byte = Const(23)"
shape=box, color=gray, tooltip="s145:Byte", style=filled, fillcolor=white
]
"s603" [
label="s603: Int = Const(5)"
shape=box, color=gray, tooltip="s603:Int", style=filled, fillcolor=white
]
"s268" [
label="s268: Int = Const(1)"
shape=box, color=gray, tooltip="s268:Int", style=filled, fillcolor=white
]
"s47" [
label="s47: Long = Const(40l)"
shape=box, color=gray, tooltip="s47:Long", style=filled, fillcolor=white
]
subgraph cluster_s1363 {
style=dashed; color="#FFCCFF"
"s1361" [
label="s1361: Context"
shape=oval, color=gray, tooltip="s1361:Context", style=filled, fillcolor=white
]
"s1363" [
label="s1363: Context => SigmaProp = s1361 => s28.SigmaDslBuilder.anyZK(s2681)"
shape=box, color=magenta, tooltip="s1363:Context => SigmaProp", style=filled, fillcolor=white
]
{rank=source; s1361}
"s1372" [
label="s1372: Long = s1361.Context.HEIGHT()"
shape=box, color=darkblue, tooltip="s1372:Long", style=filled, fillcolor=white
]
"s1381" [
label="s1381: Boolean = s1372 >= s47"
shape=box, color=gray, tooltip="s1381:Boolean", style=filled, fillcolor=white
]
"s1401" [
label="s1401: Boolean = s1372 < s66"
shape=box, color=gray, tooltip="s1401:Boolean", style=filled, fillcolor=white
]
"s2606" [
label="s2606: Col[Boolean] =\ls3.ColBuilder.fromItems(ArrayBuffer(s1381, s1401), anon$4<Boolean>)\l"
shape=box, color=darkblue, tooltip="s2606:Col[Boolean]", style=filled, fillcolor=white
]
"s2607" [
label="s2607: Boolean = s28.SigmaDslBuilder.allOf(s2606)"
shape=box, color=darkblue, tooltip="s2607:Boolean", style=filled, fillcolor=white
]
"s2608" [
label="s2608: TrivialSigma = TrivialSigmaCtor(s2607)"
shape=box, color=green, tooltip="s2608:TrivialSigma", style=filled, fillcolor=white
]
"s1406" [
label="s1406: AvlTree = s1361.Context.LastBlockUtxoRootHash()"
shape=box, color=darkblue, tooltip="s1406:AvlTree", style=filled, fillcolor=white
]
"s1416" [
label="s1416: WOption[Box] = s1361.Context.getVar(s84, BoxElem<Box>)"
shape=box, color=darkblue, tooltip="s1416:WOption[Box]", style=filled, fillcolor=white
]
"s1447" [
label="s1447: Box = s1416.WOption.get()"
shape=box, color=darkblue, tooltip="s1447:Box", style=filled, fillcolor=white
]
"s1459" [
label="s1459: Col[Byte] = s1447.Box.id()"
shape=box, color=darkblue, tooltip="s1459:Col[Byte]", style=filled, fillcolor=white
]
"s1472" [
label="s1472: WOption[Col[Byte]] = s1361.Context.getVar(s145, ColElem<Col[Byte]>)"
shape=box, color=darkblue, tooltip="s1472:WOption[Col[Byte]]", style=filled, fillcolor=white
]
"s1514" [
label="s1514: Col[Byte] = s1472.WOption.get()"
shape=box, color=darkblue, tooltip="s1514:Col[Byte]", style=filled, fillcolor=white
]
"s1536" [
label="s1536: WOption[Col[Byte]] =\ls28.SigmaDslBuilder.treeLookup(s1406, s1459, s1514)\l"
shape=box, color=darkblue, tooltip="s1536:WOption[Col[Byte]]", style=filled, fillcolor=white
]
"s1592" [
label="s1592: Boolean = s1536.WOption.isDefined()"
shape=box, color=darkblue, tooltip="s1592:Boolean", style=filled, fillcolor=white
]
"s1642" [
label="s1642: WOption[Col[Byte]] = s1447.Box.getReg(s268, ColElem<Col[Byte]>)"
shape=box, color=darkblue, tooltip="s1642:WOption[Col[Byte]]", style=filled, fillcolor=white
]
"s1684" [
label="s1684: Col[Byte] = s1642.WOption.get()"
shape=box, color=darkblue, tooltip="s1684:Col[Byte]", style=filled, fillcolor=white
]
"s1719" [
label="s1719: Boolean = s1684 == s382"
shape=box, color=gray, tooltip="s1719:Boolean", style=filled, fillcolor=white
]
"s1838" [
label="s1838: WOption[WBigInteger] =\ls1447.Box.getReg(s509, WBigIntegerElem<WBigInteger>)\l"
shape=box, color=darkblue, tooltip="s1838:WOption[WBigInteger]", style=filled, fillcolor=white
]
"s1871" [
label="s1871: WBigInteger = s1838.WOption.get()"
shape=box, color=darkblue, tooltip="s1871:WBigInteger", style=filled, fillcolor=white
]
"s1882" [
label="s1882: WECPoint = s28.SigmaDslBuilder.exponentiate(s461, s1871)"
shape=box, color=darkblue, tooltip="s1882:WECPoint", style=filled, fillcolor=white
]
"s1934" [
label="s1934: WOption[WECPoint] = s1447.Box.getReg(s603, WECPointElem<WECPoint>)"
shape=box, color=darkblue, tooltip="s1934:WOption[WECPoint]", style=filled, fillcolor=white
]
"s1967" [
label="s1967: WECPoint = s1934.WOption.get()"
shape=box, color=darkblue, tooltip="s1967:WECPoint", style=filled, fillcolor=white
]
"s2030" [
label="s2030: WOption[Long] = s1447.Box.getReg(s695, anon$8<Long>)"
shape=box, color=darkblue, tooltip="s2030:WOption[Long]", style=filled, fillcolor=white
]
"s2062" [
label="s2062: Long = s2030.WOption.get()"
shape=box, color=darkblue, tooltip="s2062:Long", style=filled, fillcolor=white
]
"s2073" [
label="s2073: Col[Byte] = s28.SigmaDslBuilder.longToByteArray(s2062)"
shape=box, color=darkblue, tooltip="s2073:Col[Byte]", style=filled, fillcolor=white
]
"s2131" [
label="s2131: WOption[Long] = s1447.Box.getReg(s795, anon$8<Long>)"
shape=box, color=darkblue, tooltip="s2131:WOption[Long]", style=filled, fillcolor=white
]
"s2163" [
label="s2163: Long = s2131.WOption.get()"
shape=box, color=darkblue, tooltip="s2163:Long", style=filled, fillcolor=white
]
"s2174" [
label="s2174: Col[Byte] = s28.SigmaDslBuilder.longToByteArray(s2163)"
shape=box, color=darkblue, tooltip="s2174:Col[Byte]", style=filled, fillcolor=white
]
"s2187" [
label="s2187: Col[Byte] = s2073.Col.append(s2174)"
shape=box, color=darkblue, tooltip="s2187:Col[Byte]", style=filled, fillcolor=white
]
"s2196" [
label="s2196: Col[Byte] = s28.SigmaDslBuilder.blake2b256(s2187)"
shape=box, color=darkblue, tooltip="s2196:Col[Byte]", style=filled, fillcolor=white
]
"s2236" [
label="s2236: WBigInteger = s28.SigmaDslBuilder.byteArrayToBigInt(s2196)"
shape=box, color=darkblue, tooltip="s2236:WBigInteger", style=filled, fillcolor=white
]
"s2272" [
label="s2272: WECPoint = s28.SigmaDslBuilder.exponentiate(s647, s2236)"
shape=box, color=darkblue, tooltip="s2272:WECPoint", style=filled, fillcolor=white
]
"s2279" [
label="s2279: WECPoint = s1967.WECPoint.add(s2272)"
shape=box, color=darkblue, tooltip="s2279:WECPoint", style=filled, fillcolor=white
]
"s2285" [
label="s2285: Boolean = s1882 == s2279"
shape=box, color=gray, tooltip="s2285:Boolean", style=filled, fillcolor=white
]
"s2585" [
label="s2585: Col[Boolean] =\ls3.ColBuilder.fromItems(ArrayBuffer(s1592, s1719, s2285), anon$4<Boolean>)\l"
shape=box, color=darkblue, tooltip="s2585:Col[Boolean]", style=filled, fillcolor=white
]
"s2586" [
label="s2586: Boolean = s28.SigmaDslBuilder.allOf(s2585)"
shape=box, color=darkblue, tooltip="s2586:Boolean", style=filled, fillcolor=white
]
"s2587" [
label="s2587: TrivialSigma = TrivialSigmaCtor(s2586)"
shape=box, color=green, tooltip="s2587:TrivialSigma", style=filled, fillcolor=white
]
"s2385" [
label="s2385: Boolean = s2062 > s1047"
shape=box, color=gray, tooltip="s2385:Boolean", style=filled, fillcolor=white
]
"s2411" [
label="s2411: TrivialSigma = TrivialSigmaCtor(s2385)"
shape=box, color=green, tooltip="s2411:TrivialSigma", style=filled, fillcolor=white
]
"s2413" [
label="s2413: SigmaProp = s2411.SigmaProp.&&(s1060)"
shape=box, color=darkblue, tooltip="s2413:SigmaProp", style=filled, fillcolor=white
]
"s2521" [
label="s2521: Boolean = s2062 <= s1047"
shape=box, color=gray, tooltip="s2521:Boolean", style=filled, fillcolor=white
]
"s2550" [
label="s2550: TrivialSigma = TrivialSigmaCtor(s2521)"
shape=box, color=green, tooltip="s2550:TrivialSigma", style=filled, fillcolor=white
]
"s2552" [
label="s2552: SigmaProp = s2550.SigmaProp.&&(s1195)"
shape=box, color=darkblue, tooltip="s2552:SigmaProp", style=filled, fillcolor=white
]
"s2567" [
label="s2567: Col[SigmaProp] =\ls3.ColBuilder.fromItems(ArrayBuffer(s2413, s2552), SigmaPropElem<SigmaProp>)\l"
shape=box, color=darkblue, tooltip="s2567:Col[SigmaProp]", style=filled, fillcolor=white
]
"s2568" [
label="s2568: SigmaProp = s28.SigmaDslBuilder.anyZK(s2567)"
shape=box, color=darkblue, tooltip="s2568:SigmaProp", style=filled, fillcolor=white
]
"s2589" [
label="s2589: SigmaProp = s2587.SigmaProp.&&(s2568)"
shape=box, color=darkblue, tooltip="s2589:SigmaProp", style=filled, fillcolor=white
]
"s2610" [
label="s2610: SigmaProp = s2608.SigmaProp.&&(s2589)"
shape=box, color=darkblue, tooltip="s2610:SigmaProp", style=filled, fillcolor=white
]
"s2638" [
label="s2638: Boolean = s1372 >= s66"
shape=box, color=gray, tooltip="s2638:Boolean", style=filled, fillcolor=white
]
"s2664" [
label="s2664: TrivialSigma = TrivialSigmaCtor(s2638)"
shape=box, color=green, tooltip="s2664:TrivialSigma", style=filled, fillcolor=white
]
"s2666" [
label="s2666: SigmaProp = s2664.SigmaProp.&&(s1060)"
shape=box, color=darkblue, tooltip="s2666:SigmaProp", style=filled, fillcolor=white
]
"s2681" [
label="s2681: Col[SigmaProp] =\ls3.ColBuilder.fromItems(ArrayBuffer(s2610, s2666), SigmaPropElem<SigmaProp>)\l"
shape=box, color=darkblue, tooltip="s2681:Col[SigmaProp]", style=filled, fillcolor=white
]
{rank=sink; s1363}
}
"s39" [
label="s39: CostModel = s28.SigmaDslBuilder.CostModel()"
shape=box, color=darkblue, tooltip="s39:CostModel", style=filled, fillcolor=white
]
"s41" [
label="s41: Int = s39.CostModel.SelectField()"
shape=box, color=darkblue, tooltip="s41:Int", style=filled, fillcolor=white
]
"s48" [
label="s48: Int = CostOf(Const:() => SLong)"
shape=box, color=gray, tooltip="s48:Int", style=filled, fillcolor=white
]
"s52" [
label="s52: Int = s41 + s48"
shape=box, color=gray, tooltip="s52:Int", style=filled, fillcolor=white
]
"s453" [
label="s453: Long = Const(1024l)"
shape=box, color=gray, tooltip="s453:Long", style=filled, fillcolor=white
]
"s324" [
label="s324: Int = s39.CostModel.GetRegister()"
shape=box, color=darkblue, tooltip="s324:Int", style=filled, fillcolor=white
]
"s1052" [
label="s1052: Int = s324 + s48"
shape=box, color=gray, tooltip="s1052:Int", style=filled, fillcolor=white
]
"s1062" [
label="s1062: Int = CostOf(ProveDlogEval:(SUnit) => SSigmaProp)"
shape=box, color=gray, tooltip="s1062:Int", style=filled, fillcolor=white
]
"s1066" [
label="s1066: Int = CostOf(SigmaPropIsValid:(SSigmaProp) => SBoolean)"
shape=box, color=gray, tooltip="s1066:Int", style=filled, fillcolor=white
]
"s1067" [
label="s1067: Int = s1062 + s1066"
shape=box, color=gray, tooltip="s1067:Int", style=filled, fillcolor=white
]
"s1081" [
label="s1081: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s1052, s1067), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s1081:Col[Int]", style=filled, fillcolor=white
]
"s11" [
label="s11: Int = Const(0)"
shape=box, color=gray, tooltip="s11:Int", style=filled, fillcolor=white
]
"s12" [
label="s12: IntPlusMonoid[Int] = IntPlusMonoidCtor(s11)"
shape=box, color=green, tooltip="s12:IntPlusMonoid[Int]", style=filled, fillcolor=white
]
"s1083" [
label="s1083: Int = s1081.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s1083:Int", style=filled, fillcolor=white
]
"s1086" [
label="s1086: Int = CostOf(AND_per_item:(Col[SBoolean]) => SBoolean)"
shape=box, color=gray, tooltip="s1086:Int", style=filled, fillcolor=white
]
"s1085" [
label="s1085: Int = s1081.Col.length()"
shape=box, color=darkblue, tooltip="s1085:Int", style=filled, fillcolor=white
]
"s1087" [
label="s1087: Int = s1086 * s1085"
shape=box, color=gray, tooltip="s1087:Int", style=filled, fillcolor=white
]
"s1088" [
label="s1088: Int = s1083 + s1087"
shape=box, color=gray, tooltip="s1088:Int", style=filled, fillcolor=white
]
"s1231" [
label="s1231: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s1088, s1088), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s1231:Col[Int]", style=filled, fillcolor=white
]
"s1233" [
label="s1233: Int = s1231.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s1233:Int", style=filled, fillcolor=white
]
"s1236" [
label="s1236: Int = CostOf(OR_per_item:(Col[SBoolean]) => SBoolean)"
shape=box, color=gray, tooltip="s1236:Int", style=filled, fillcolor=white
]
"s1235" [
label="s1235: Int = s1231.Col.length()"
shape=box, color=darkblue, tooltip="s1235:Int", style=filled, fillcolor=white
]
"s1237" [
label="s1237: Int = s1236 * s1235"
shape=box, color=gray, tooltip="s1237:Int", style=filled, fillcolor=white
]
"s1238" [
label="s1238: Int = s1233 + s1237"
shape=box, color=gray, tooltip="s1238:Int", style=filled, fillcolor=white
]
"s456" [
label="s456: Int = CostOf(EQ_per_kb:(T,T) => SBoolean)"
shape=box, color=gray, tooltip="s456:Int", style=filled, fillcolor=white
]
"s462" [
label="s462: Int = CostOf(GroupGenerator$:() => SGroupElement)"
shape=box, color=gray, tooltip="s462:Int", style=filled, fillcolor=white
]
"s554" [
label="s554: Int = s462 + s324"
shape=box, color=gray, tooltip="s554:Int", style=filled, fillcolor=white
]
"s555" [
label="s555: Int =\lCostOf(Exponentiate:(SGroupElement,SBigInt) => SGroupElement)\l"
shape=box, color=gray, tooltip="s555:Int", style=filled, fillcolor=white
]
"s556" [
label="s556: Int = s554 + s555"
shape=box, color=gray, tooltip="s556:Int", style=filled, fillcolor=white
]
"s648" [
label="s648: Int = CostOf(Const:() => SGroupElement)"
shape=box, color=gray, tooltip="s648:Int", style=filled, fillcolor=white
]
"s859" [
label="s859: Int = CostOf(Append:[IV](Col[IV],Col[IV]) => Col[IV])"
shape=box, color=gray, tooltip="s859:Int", style=filled, fillcolor=white
]
"s49" [
label="s49: Long = TypeSize(SLong)"
shape=box, color=gray, tooltip="s49:Long", style=filled, fillcolor=white
]
"s743" [
label="s743: Int = s49.toInt"
shape=box, color=gray, tooltip="s743:Int", style=filled, fillcolor=white
]
"s745" [
label="s745: Col[Int] = s3.ColBuilder.replicate(s743, s11)"
shape=box, color=darkblue, tooltip="s745:Col[Int]", style=filled, fillcolor=white
]
"s856" [
label="s856: Col[Int] = s745.Col.append(s745)"
shape=box, color=darkblue, tooltip="s856:Col[Int]", style=filled, fillcolor=white
]
"s875" [
label="s875: Int = s856.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s875:Int", style=filled, fillcolor=white
]
"s876" [
label="s876: Int = s859 + s875"
shape=box, color=gray, tooltip="s876:Int", style=filled, fillcolor=white
]
"s139" [
label="s139: Long = TypeSize(SByte)"
shape=box, color=gray, tooltip="s139:Long", style=filled, fillcolor=white
]
"s747" [
label="s747: Col[Long] = s3.ColBuilder.replicate(s743, s139)"
shape=box, color=darkblue, tooltip="s747:Col[Long]", style=filled, fillcolor=white
]
"s858" [
label="s858: Col[Long] = s747.Col.append(s747)"
shape=box, color=darkblue, tooltip="s858:Col[Long]", style=filled, fillcolor=white
]
"s15" [
label="s15: Long = Const(0l)"
shape=box, color=gray, tooltip="s15:Long", style=filled, fillcolor=white
]
"s16" [
label="s16: LongPlusMonoid[Long] = LongPlusMonoidCtor(s15)"
shape=box, color=green, tooltip="s16:LongPlusMonoid[Long]", style=filled, fillcolor=white
]
"s888" [
label="s888: Long = s858.Col.sum(s16)"
shape=box, color=darkblue, tooltip="s888:Long", style=filled, fillcolor=white
]
"s890" [
label="s890: Long = s888 / s453"
shape=box, color=gray, tooltip="s890:Long", style=filled, fillcolor=white
]
"s891" [
label="s891: Int = s890.toInt"
shape=box, color=gray, tooltip="s891:Int", style=filled, fillcolor=white
]
"s892" [
label="s892: Int =\lCostOf(CalcBlake2b256_per_kb:(Col[SByte]) => Col[SByte])\l"
shape=box, color=gray, tooltip="s892:Int", style=filled, fillcolor=white
]
"s893" [
label="s893: Int = s891 * s892"
shape=box, color=gray, tooltip="s893:Int", style=filled, fillcolor=white
]
"s894" [
label="s894: Int = s876 + s893"
shape=box, color=gray, tooltip="s894:Int", style=filled, fillcolor=white
]
"s932" [
label="s932: Int = CostOf(ByteArrayToBigInt:(Col[SByte]) => SBigInt)"
shape=box, color=gray, tooltip="s932:Int", style=filled, fillcolor=white
]
"s933" [
label="s933: Int = s894 + s932"
shape=box, color=gray, tooltip="s933:Int", style=filled, fillcolor=white
]
"s934" [
label="s934: Int =\lCostOf(new_BigInteger_per_item:(Col[SByte]) => SBigInt)\l"
shape=box, color=gray, tooltip="s934:Int", style=filled, fillcolor=white
]
"s134" [
label="s134: Int = Const(32)"
shape=box, color=gray, tooltip="s134:Int", style=filled, fillcolor=white
]
"s916" [
label="s916: Long = ToLong s134"
shape=box, color=gray, tooltip="s916:Long", style=filled, fillcolor=white
]
"s917" [
label="s917: Long = s139 * s916"
shape=box, color=gray, tooltip="s917:Long", style=filled, fillcolor=white
]
"s935" [
label="s935: Int = s917.toInt"
shape=box, color=gray, tooltip="s935:Int", style=filled, fillcolor=white
]
"s936" [
label="s936: Int = s934 * s935"
shape=box, color=gray, tooltip="s936:Int", style=filled, fillcolor=white
]
"s937" [
label="s937: Int = s933 + s936"
shape=box, color=gray, tooltip="s937:Int", style=filled, fillcolor=white
]
"s940" [
label="s940: Int = s648 + s937"
shape=box, color=gray, tooltip="s940:Int", style=filled, fillcolor=white
]
"s942" [
label="s942: Int = s940 + s555"
shape=box, color=gray, tooltip="s942:Int", style=filled, fillcolor=white
]
"s947" [
label="s947: Int = s324 + s942"
shape=box, color=gray, tooltip="s947:Int", style=filled, fillcolor=white
]
"s948" [
label="s948: Int =\lCostOf(MultiplyGroup:(SGroupElement,SGroupElement) => SGroupElement)\l"
shape=box, color=gray, tooltip="s948:Int", style=filled, fillcolor=white
]
"s949" [
label="s949: Int = s947 + s948"
shape=box, color=gray, tooltip="s949:Int", style=filled, fillcolor=white
]
"s953" [
label="s953: Int = s556 + s949"
shape=box, color=gray, tooltip="s953:Int", style=filled, fillcolor=white
]
"s178" [
label="s178: Int = CostOf(Const:() => Col[IV])"
shape=box, color=gray, tooltip="s178:Int", style=filled, fillcolor=white
]
"s349" [
label="s349: Int = s324 + s178"
shape=box, color=gray, tooltip="s349:Int", style=filled, fillcolor=white
]
"s423" [
label="s423: Int = s349 + s178"
shape=box, color=gray, tooltip="s423:Int", style=filled, fillcolor=white
]
"s387" [
label="s387: Int = s382.Col.length()"
shape=box, color=darkblue, tooltip="s387:Int", style=filled, fillcolor=white
]
"s450" [
label="s450: Long = ToLong s387"
shape=box, color=gray, tooltip="s450:Long", style=filled, fillcolor=white
]
"s451" [
label="s451: Long = s139 * s450"
shape=box, color=gray, tooltip="s451:Long", style=filled, fillcolor=white
]
"s1333" [
label="s1333: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s52, s1067), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s1333:Col[Int]", style=filled, fillcolor=white
]
"s1335" [
label="s1335: Int = s1333.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s1335:Int", style=filled, fillcolor=white
]
"s1337" [
label="s1337: Int = s1333.Col.length()"
shape=box, color=darkblue, tooltip="s1337:Int", style=filled, fillcolor=white
]
"s1339" [
label="s1339: Int = s1086 * s1337"
shape=box, color=gray, tooltip="s1339:Int", style=filled, fillcolor=white
]
"s1340" [
label="s1340: Int = s1335 + s1339"
shape=box, color=gray, tooltip="s1340:Int", style=filled, fillcolor=white
]
subgraph cluster_s2698 {
style=dashed; color="#FFCCFF"
"s2696" [
label="s2696: Context"
shape=oval, color=gray, tooltip="s2696:Context", style=filled, fillcolor=white
]
"s2698" [
label="s2698: Context => Int = s2696 => s4014 + s4018"
shape=box, color=magenta, tooltip="s2698:Context => Int", style=filled, fillcolor=white
]
{rank=source; s2696}
"s2750" [
label="s2750: WOption[Box] = s2696.Context.getVar(s84, BoxElem<Box>)"
shape=box, color=darkblue, tooltip="s2750:WOption[Box]", style=filled, fillcolor=white
]
"s2781" [
label="s2781: Box = s2750.WOption.get()"
shape=box, color=darkblue, tooltip="s2781:Box", style=filled, fillcolor=white
]
"s2976" [
label="s2976: WOption[Col[Byte]] = s2781.Box.getReg(s268, ColElem<Col[Byte]>)"
shape=box, color=darkblue, tooltip="s2976:WOption[Col[Byte]]", style=filled, fillcolor=white
]
"s3018" [
label="s3018: Col[Byte] = s2976.WOption.get()"
shape=box, color=darkblue, tooltip="s3018:Col[Byte]", style=filled, fillcolor=white
]
"s3026" [
label="s3026: Int = s3018.Col.length()"
shape=box, color=darkblue, tooltip="s3026:Int", style=filled, fillcolor=white
]
"s3095" [
label="s3095: Long = ToLong s3026"
shape=box, color=gray, tooltip="s3095:Long", style=filled, fillcolor=white
]
"s3096" [
label="s3096: Long = s139 * s3095"
shape=box, color=gray, tooltip="s3096:Long", style=filled, fillcolor=white
]
"s3111" [
label="s3111: Long = s3096 + s451"
shape=box, color=gray, tooltip="s3111:Long", style=filled, fillcolor=white
]
"s3113" [
label="s3113: Long = s3111 / s453"
shape=box, color=gray, tooltip="s3113:Long", style=filled, fillcolor=white
]
"s3114" [
label="s3114: Int = s3113.toInt"
shape=box, color=gray, tooltip="s3114:Int", style=filled, fillcolor=white
]
"s3116" [
label="s3116: Int = s3114 * s456"
shape=box, color=gray, tooltip="s3116:Int", style=filled, fillcolor=white
]
"s3117" [
label="s3117: Int = s423 + s3116"
shape=box, color=gray, tooltip="s3117:Int", style=filled, fillcolor=white
]
"s3919" [
label="s3919: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s268, s3117, s953, s1238), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s3919:Col[Int]", style=filled, fillcolor=white
]
"s3921" [
label="s3921: Int = s3919.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s3921:Int", style=filled, fillcolor=white
]
"s3923" [
label="s3923: Int = s3919.Col.length()"
shape=box, color=darkblue, tooltip="s3923:Int", style=filled, fillcolor=white
]
"s3925" [
label="s3925: Int = s1086 * s3923"
shape=box, color=gray, tooltip="s3925:Int", style=filled, fillcolor=white
]
"s3926" [
label="s3926: Int = s3921 + s3925"
shape=box, color=gray, tooltip="s3926:Int", style=filled, fillcolor=white
]
"s3940" [
label="s3940: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s52, s52, s3926), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s3940:Col[Int]", style=filled, fillcolor=white
]
"s3942" [
label="s3942: Int = s3940.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s3942:Int", style=filled, fillcolor=white
]
"s3944" [
label="s3944: Int = s3940.Col.length()"
shape=box, color=darkblue, tooltip="s3944:Int", style=filled, fillcolor=white
]
"s3946" [
label="s3946: Int = s1086 * s3944"
shape=box, color=gray, tooltip="s3946:Int", style=filled, fillcolor=white
]
"s3947" [
label="s3947: Int = s3942 + s3946"
shape=box, color=gray, tooltip="s3947:Int", style=filled, fillcolor=white
]
"s4012" [
label="s4012: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s3947, s1340), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s4012:Col[Int]", style=filled, fillcolor=white
]
"s4014" [
label="s4014: Int = s4012.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s4014:Int", style=filled, fillcolor=white
]
"s4016" [
label="s4016: Int = s4012.Col.length()"
shape=box, color=darkblue, tooltip="s4016:Int", style=filled, fillcolor=white
]
"s4018" [
label="s4018: Int = s1236 * s4016"
shape=box, color=gray, tooltip="s4018:Int", style=filled, fillcolor=white
]
{rank=sink; s2698}
}
"s4022" [
label="s4022: (Context => SigmaProp, Context => Int) = (s1363, s2698)"
shape=box, color=gray, tooltip="s4022:(Context => SigmaProp, Context => Int)", style=filled, fillcolor=white
]
"s2131" -> "s2163" [style=solid]
"s1333" -> "s1337" [style=solid]
"s3940" -> "s3944" [style=solid]
"s1447" -> "s2131" [style=solid]
"s795" -> "s2131" [style=solid]
"s1363" -> "s4022" [style=solid]
"s2698" -> "s4022" [style=solid]
"s1236" -> "s1237" [style=solid]
"s1235" -> "s1237" [style=solid]
"s891" -> "s893" [style=solid]
"s892" -> "s893" [style=solid]
"s1081" -> "s1083" [style=solid]
"s12" -> "s1083" [style=solid]
"s2781" -> "s2976" [style=solid]
"s268" -> "s2976" [style=solid]
"s1361" -> "s1406" [style=solid]
"s28" -> "s1882" [style=solid]
"s461" -> "s1882" [style=solid]
"s1871" -> "s1882" [style=solid]
"s2030" -> "s2062" [style=solid]
"s1372" -> "s1401" [style=solid]
"s66" -> "s1401" [style=solid]
"s28" -> "s2607" [style=solid]
"s2606" -> "s2607" [style=solid]
"s3940" -> "s3942" [style=solid]
"s12" -> "s3942" [style=solid]
"s1231" -> "s1233" [style=solid]
"s12" -> "s1233" [style=solid]
"s3" -> "s747" [style=solid]
"s743" -> "s747" [style=solid]
"s139" -> "s747" [style=solid]
"s3942" -> "s3947" [style=solid]
"s3946" -> "s3947" [style=solid]
"s1934" -> "s1967" [style=solid]
"s41" -> "s52" [style=solid]
"s48" -> "s52" [style=solid]
"s2696" -> "s2698" [style=dashed, color=lightgray, weight=0]
"s4014" -> "s2698" [style=solid]
"s4018" -> "s2698" [style=solid]
"s3114" -> "s3116" [style=solid]
"s456" -> "s3116" [style=solid]
"s1838" -> "s1871" [style=solid]
"s139" -> "s917" [style=solid]
"s916" -> "s917" [style=solid]
"s947" -> "s949" [style=solid]
"s948" -> "s949" [style=solid]
"s1086" -> "s1087" [style=solid]
"s1085" -> "s1087" [style=solid]
"s1472" -> "s1514" [style=solid]
"s2550" -> "s2552" [style=solid]
"s1195" -> "s2552" [style=solid]
"s3" -> "s3919" [style=solid]
"s268" -> "s3919" [style=solid]
"s3117" -> "s3919" [style=solid]
"s953" -> "s3919" [style=solid]
"s1238" -> "s3919" [style=solid]
"s1236" -> "s4018" [style=solid]
"s4016" -> "s4018" [style=solid]
"s28" -> "s2236" [style=solid]
"s2196" -> "s2236" [style=solid]
"s933" -> "s937" [style=solid]
"s936" -> "s937" [style=solid]
"s3919" -> "s3923" [style=solid]
"s28" -> "s2073" [style=solid]
"s2062" -> "s2073" [style=solid]
"s1416" -> "s1447" [style=solid]
"s2696" -> "s2750" [style=solid]
"s84" -> "s2750" [style=solid]
"s28" -> "s2586" [style=solid]
"s2585" -> "s2586" [style=solid]
"s940" -> "s942" [style=solid]
"s555" -> "s942" [style=solid]
"s1062" -> "s1067" [style=solid]
"s1066" -> "s1067" [style=solid]
"s2587" -> "s2589" [style=solid]
"s2568" -> "s2589" [style=solid]
"s876" -> "s894" [style=solid]
"s893" -> "s894" [style=solid]
"s4012" -> "s4016" [style=solid]
"s324" -> "s349" [style=solid]
"s178" -> "s349" [style=solid]
"s3" -> "s2606" [style=solid]
"s1381" -> "s2606" [style=solid]
"s1401" -> "s2606" [style=solid]
"s1233" -> "s1238" [style=solid]
"s1237" -> "s1238" [style=solid]
"s134" -> "s916" [style=solid]
"s28" -> "s461" [style=solid]
"s3921" -> "s3926" [style=solid]
"s3925" -> "s3926" [style=solid]
"s1191" -> "s1195" [style=solid]
"s39" -> "s324" [style=solid]
"s1536" -> "s1592" [style=solid]
"s1684" -> "s1719" [style=solid]
"s382" -> "s1719" [style=solid]
"s3" -> "s4012" [style=solid]
"s3947" -> "s4012" [style=solid]
"s1340" -> "s4012" [style=solid]
"s1372" -> "s2638" [style=solid]
"s66" -> "s2638" [style=solid]
"s2976" -> "s3018" [style=solid]
"s894" -> "s933" [style=solid]
"s932" -> "s933" [style=solid]
"s462" -> "s554" [style=solid]
"s324" -> "s554" [style=solid]
"s28" -> "s2196" [style=solid]
"s2187" -> "s2196" [style=solid]
"s2664" -> "s2666" [style=solid]
"s1060" -> "s2666" [style=solid]
"s2750" -> "s2781" [style=solid]
"s1882" -> "s2285" [style=solid]
"s2279" -> "s2285" [style=solid]
"s3" -> "s2681" [style=solid]
"s2610" -> "s2681" [style=solid]
"s2666" -> "s2681" [style=solid]
"s3" -> "s1231" [style=solid]
"s1088" -> "s1231" [style=solid]
"s1088" -> "s1231" [style=solid]
"s1055" -> "s1060" [style=solid]
"s39" -> "s41" [style=solid]
"s28" -> "s2272" [style=solid]
"s647" -> "s2272" [style=solid]
"s2236" -> "s2272" [style=solid]
"s3" -> "s1333" [style=solid]
"s52" -> "s1333" [style=solid]
"s1067" -> "s1333" [style=solid]
"s556" -> "s953" [style=solid]
"s949" -> "s953" [style=solid]
"s858" -> "s888" [style=solid]
"s16" -> "s888" [style=solid]
"s2411" -> "s2413" [style=solid]
"s1060" -> "s2413" [style=solid]
"s3" -> "s2585" [style=solid]
"s1592" -> "s2585" [style=solid]
"s1719" -> "s2585" [style=solid]
"s2285" -> "s2585" [style=solid]
"s745" -> "s856" [style=solid]
"s745" -> "s856" [style=solid]
"s3" -> "s745" [style=solid]
"s743" -> "s745" [style=solid]
"s11" -> "s745" [style=solid]
"s3096" -> "s3111" [style=solid]
"s451" -> "s3111" [style=solid]
"s349" -> "s423" [style=solid]
"s178" -> "s423" [style=solid]
"s1086" -> "s3925" [style=solid]
"s3923" -> "s3925" [style=solid]
"s28" -> "s2568" [style=solid]
"s2567" -> "s2568" [style=solid]
"s49" -> "s743" [style=solid]
"s856" -> "s875" [style=solid]
"s12" -> "s875" [style=solid]
"s11" -> "s12" [style=solid]
"s934" -> "s936" [style=solid]
"s935" -> "s936" [style=solid]
"s3" -> "s382" [style=solid]
"s381" -> "s382" [style=solid]
"s324" -> "s947" [style=solid]
"s942" -> "s947" [style=solid]
"s2062" -> "s2521" [style=solid]
"s1047" -> "s2521" [style=solid]
"s139" -> "s451" [style=solid]
"s450" -> "s451" [style=solid]
"s28" -> "s39" [style=solid]
"s888" -> "s890" [style=solid]
"s453" -> "s890" [style=solid]
"s382" -> "s387" [style=solid]
"s1086" -> "s1339" [style=solid]
"s1337" -> "s1339" [style=solid]
"s2608" -> "s2610" [style=solid]
"s2589" -> "s2610" [style=solid]
"s747" -> "s858" [style=solid]
"s747" -> "s858" [style=solid]
"s1447" -> "s1838" [style=solid]
"s509" -> "s1838" [style=solid]
"s2638" -> "s2664" [style=solid]
"s1372" -> "s1381" [style=solid]
"s47" -> "s1381" [style=solid]
"s2521" -> "s2550" [style=solid]
"s1642" -> "s1684" [style=solid]
"s3" -> "s1081" [style=solid]
"s1052" -> "s1081" [style=solid]
"s1067" -> "s1081" [style=solid]
"s3919" -> "s3921" [style=solid]
"s12" -> "s3921" [style=solid]
"s1335" -> "s1340" [style=solid]
"s1339" -> "s1340" [style=solid]
"s1361" -> "s1472" [style=solid]
"s145" -> "s1472" [style=solid]
"s3" -> "s2567" [style=solid]
"s2413" -> "s2567" [style=solid]
"s2552" -> "s2567" [style=solid]
"s3" -> "s3940" [style=solid]
"s52" -> "s3940" [style=solid]
"s52" -> "s3940" [style=solid]
"s3926" -> "s3940" [style=solid]
"s3113" -> "s3114" [style=solid]
"s15" -> "s16" [style=solid]
"s3018" -> "s3026" [style=solid]
"s1231" -> "s1235" [style=solid]
"s1081" -> "s1085" [style=solid]
"s3026" -> "s3095" [style=solid]
"s1447" -> "s1934" [style=solid]
"s603" -> "s1934" [style=solid]
"s2385" -> "s2411" [style=solid]
"s28" -> "s1536" [style=solid]
"s1406" -> "s1536" [style=solid]
"s1459" -> "s1536" [style=solid]
"s1514" -> "s1536" [style=solid]
"s1967" -> "s2279" [style=solid]
"s2272" -> "s2279" [style=solid]
"s324" -> "s1052" [style=solid]
"s48" -> "s1052" [style=solid]
"s423" -> "s3117" [style=solid]
"s3116" -> "s3117" [style=solid]
"s1447" -> "s2030" [style=solid]
"s695" -> "s2030" [style=solid]
"s1361" -> "s1372" [style=solid]
"s859" -> "s876" [style=solid]
"s875" -> "s876" [style=solid]
"s1086" -> "s3946" [style=solid]
"s3944" -> "s3946" [style=solid]
"s387" -> "s450" [style=solid]
"s1447" -> "s1459" [style=solid]
"s554" -> "s556" [style=solid]
"s555" -> "s556" [style=solid]
"s890" -> "s891" [style=solid]
"s2073" -> "s2187" [style=solid]
"s2174" -> "s2187" [style=solid]
"s28" -> "s2174" [style=solid]
"s2163" -> "s2174" [style=solid]
"s2607" -> "s2608" [style=solid]
"s1447" -> "s1642" [style=solid]
"s268" -> "s1642" [style=solid]
"s4012" -> "s4014" [style=solid]
"s12" -> "s4014" [style=solid]
"s2062" -> "s2385" [style=solid]
"s1047" -> "s2385" [style=solid]
"s2586" -> "s2587" [style=solid]
"s1361" -> "s1363" [style=dashed, color=lightgray, weight=0]
"s28" -> "s1363" [style=solid]
"s2681" -> "s1363" [style=solid]
"s1333" -> "s1335" [style=solid]
"s12" -> "s1335" [style=solid]
"s3111" -> "s3113" [style=solid]
"s453" -> "s3113" [style=solid]
"s648" -> "s940" [style=solid]
"s937" -> "s940" [style=solid]
"s917" -> "s935" [style=solid]
"s139" -> "s3096" [style=solid]
"s3095" -> "s3096" [style=solid]
"s1361" -> "s1416" [style=solid]
"s84" -> "s1416" [style=solid]
"s1083" -> "s1088" [style=solid]
"s1087" -> "s1088" [style=solid]
}
