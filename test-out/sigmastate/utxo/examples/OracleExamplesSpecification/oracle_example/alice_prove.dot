digraph "alice_prove" {
concentrate=true
node [style=filled, fillcolor=orangered]

"s10378" [
label="s10378: Int = Const(3)"
shape=box, color=gray, tooltip="s10378:Int", style=filled, fillcolor=white
]
"s10648" [
label="s10648: WECPoint = ECPoint(299161,31af9e,...)"
shape=box, color=gray, tooltip="s10648:WECPoint", style=filled, fillcolor=white
]
"s10652" [
label="s10652: ProveDlogEvidence = ProveDlogEvidenceCtor(s10648)"
shape=box, color=green, tooltip="s10652:ProveDlogEvidence", style=filled, fillcolor=white
]
"s1047" [
label="s1047: Long = Const(15l)"
shape=box, color=gray, tooltip="s1047:Long", style=filled, fillcolor=white
]
"s28" [
label="s28: TestSigmaDslBuilder = TestSigmaDslBuilderCtor()"
shape=box, color=green, tooltip="s28:TestSigmaDslBuilder", style=filled, fillcolor=white
]
"s695" [
label="s695: Int = Const(4)"
shape=box, color=gray, tooltip="s695:Int", style=filled, fillcolor=white
]
"s3" [
label="s3: ColOverArrayBuilder = ColOverArrayBuilderCtor()"
shape=box, color=green, tooltip="s3:ColOverArrayBuilder", style=filled, fillcolor=white
]
"s10455" [
label="s10455: WArray[Byte] =\lWArrayConst(Array(-49, 8, -51, 7, 2, 57, -14, 59, -4, 60, 70, 48, 25, 57, 63, -109, -67, 20, 62, 41, 50, 117, 29, -99, -87, 8, -67, -121, -54, 49, 50, -3, -76, -75, 19, 112, 29), Liftable(anon$5<Byte>))\l"
shape=box, color=gray, tooltip="s10455:WArray[Byte]", style=filled, fillcolor=white
]
"s10456" [
label="s10456: Col[Byte] = s3.ColBuilder.fromArray(s10455)"
shape=box, color=darkblue, tooltip="s10456:Col[Byte]", style=filled, fillcolor=white
]
"s11" [
label="s11: Int = Const(0)"
shape=box, color=gray, tooltip="s11:Int", style=filled, fillcolor=white
]
"s10796" [
label="s10796: WECPoint = ECPoint(4c6dc3,2fba31,...)"
shape=box, color=gray, tooltip="s10796:WECPoint", style=filled, fillcolor=white
]
"s10800" [
label="s10800: ProveDlogEvidence = ProveDlogEvidenceCtor(s10796)"
shape=box, color=green, tooltip="s10800:ProveDlogEvidence", style=filled, fillcolor=white
]
subgraph cluster_s10871 {
style=dashed; color="#FFCCFF"
"s10869" [
label="s10869: Context"
shape=oval, color=gray, tooltip="s10869:Context", style=filled, fillcolor=white
]
"s10871" [
label="s10871: Context => SigmaProp = s10869 => s11410.SigmaProp.&&(s11391)"
shape=box, color=magenta, tooltip="s10871:Context => SigmaProp", style=filled, fillcolor=white
]
{rank=source; s10869}
"s10877" [
label="s10877: Col[Box] = s10869.Context.INPUTS()"
shape=box, color=darkblue, tooltip="s10877:Col[Box]", style=filled, fillcolor=white
]
"s10879" [
label="s10879: Int = s10877.Col.length()"
shape=box, color=darkblue, tooltip="s10879:Int", style=filled, fillcolor=white
]
"s10928" [
label="s10928: Boolean = s10879 == s10378"
shape=box, color=gray, tooltip="s10928:Boolean", style=filled, fillcolor=white
]
"s10968" [
label="s10968: Box = s10877.Col.apply(s11)"
shape=box, color=darkblue, tooltip="s10968:Box", style=filled, fillcolor=white
]
"s10990" [
label="s10990: Col[Byte] = s10968.Box.propositionBytes()"
shape=box, color=darkblue, tooltip="s10990:Col[Byte]", style=filled, fillcolor=white
]
"s11014" [
label="s11014: Boolean = s10990 == s10456"
shape=box, color=gray, tooltip="s11014:Boolean", style=filled, fillcolor=white
]
"s11408" [
label="s11408: Col[Boolean] =\ls3.ColBuilder.fromItems(ArrayBuffer(s10928, s11014), anon$4<Boolean>)\l"
shape=box, color=darkblue, tooltip="s11408:Col[Boolean]", style=filled, fillcolor=white
]
"s11409" [
label="s11409: Boolean = s28.SigmaDslBuilder.allOf(s11408)"
shape=box, color=darkblue, tooltip="s11409:Boolean", style=filled, fillcolor=white
]
"s11410" [
label="s11410: TrivialSigma = TrivialSigmaCtor(s11409)"
shape=box, color=green, tooltip="s11410:TrivialSigma", style=filled, fillcolor=white
]
"s11142" [
label="s11142: WOption[Long] = s10968.Box.getReg(s695, anon$8<Long>)"
shape=box, color=darkblue, tooltip="s11142:WOption[Long]", style=filled, fillcolor=white
]
"s11174" [
label="s11174: Long = s11142.WOption.get()"
shape=box, color=darkblue, tooltip="s11174:Long", style=filled, fillcolor=white
]
"s11190" [
label="s11190: Boolean = s11174 > s1047"
shape=box, color=gray, tooltip="s11190:Boolean", style=filled, fillcolor=white
]
"s11219" [
label="s11219: TrivialSigma = TrivialSigmaCtor(s11190)"
shape=box, color=green, tooltip="s11219:TrivialSigma", style=filled, fillcolor=white
]
"s11221" [
label="s11221: SigmaProp = s11219.SigmaProp.&&(s10652)"
shape=box, color=darkblue, tooltip="s11221:SigmaProp", style=filled, fillcolor=white
]
"s11344" [
label="s11344: Boolean = s11174 <= s1047"
shape=box, color=gray, tooltip="s11344:Boolean", style=filled, fillcolor=white
]
"s11373" [
label="s11373: TrivialSigma = TrivialSigmaCtor(s11344)"
shape=box, color=green, tooltip="s11373:TrivialSigma", style=filled, fillcolor=white
]
"s11375" [
label="s11375: SigmaProp = s11373.SigmaProp.&&(s10800)"
shape=box, color=darkblue, tooltip="s11375:SigmaProp", style=filled, fillcolor=white
]
"s11390" [
label="s11390: Col[SigmaProp] =\ls3.ColBuilder.fromItems(ArrayBuffer(s11221, s11375), SigmaPropElem<SigmaProp>)\l"
shape=box, color=darkblue, tooltip="s11390:Col[SigmaProp]", style=filled, fillcolor=white
]
"s11391" [
label="s11391: SigmaProp = s28.SigmaDslBuilder.anyZK(s11390)"
shape=box, color=darkblue, tooltip="s11391:SigmaProp", style=filled, fillcolor=white
]
{rank=sink; s10871}
}
"s10446" [
label="s10446: Int = CostOf(ExtractScriptBytes:(SBox) => Col[SByte])"
shape=box, color=gray, tooltip="s10446:Int", style=filled, fillcolor=white
]
"s4226" [
label="s4226: Int = CostOf(ByIndex:[IV](Col[IV],SInt) => IV)"
shape=box, color=gray, tooltip="s4226:Int", style=filled, fillcolor=white
]
"s39" [
label="s39: CostModel = s28.SigmaDslBuilder.CostModel()"
shape=box, color=darkblue, tooltip="s39:CostModel", style=filled, fillcolor=white
]
"s4141" [
label="s4141: Int = s39.CostModel.CollectionConst()"
shape=box, color=darkblue, tooltip="s4141:Int", style=filled, fillcolor=white
]
"s324" [
label="s324: Int = s39.CostModel.GetRegister()"
shape=box, color=darkblue, tooltip="s324:Int", style=filled, fillcolor=white
]
"s48" [
label="s48: Int = CostOf(Const:() => SLong)"
shape=box, color=gray, tooltip="s48:Int", style=filled, fillcolor=white
]
"s1052" [
label="s1052: Int = s324 + s48"
shape=box, color=gray, tooltip="s1052:Int", style=filled, fillcolor=white
]
"s1062" [
label="s1062: Int = CostOf(ProveDlogEval:(SUnit) => SSigmaProp)"
shape=box, color=gray, tooltip="s1062:Int", style=filled, fillcolor=white
]
"s1066" [
label="s1066: Int = CostOf(SigmaPropIsValid:(SSigmaProp) => SBoolean)"
shape=box, color=gray, tooltip="s1066:Int", style=filled, fillcolor=white
]
"s1067" [
label="s1067: Int = s1062 + s1066"
shape=box, color=gray, tooltip="s1067:Int", style=filled, fillcolor=white
]
"s1081" [
label="s1081: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s1052, s1067), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s1081:Col[Int]", style=filled, fillcolor=white
]
"s12" [
label="s12: IntPlusMonoid[Int] = IntPlusMonoidCtor(s11)"
shape=box, color=green, tooltip="s12:IntPlusMonoid[Int]", style=filled, fillcolor=white
]
"s1083" [
label="s1083: Int = s1081.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s1083:Int", style=filled, fillcolor=white
]
"s1086" [
label="s1086: Int = CostOf(AND_per_item:(Col[SBoolean]) => SBoolean)"
shape=box, color=gray, tooltip="s1086:Int", style=filled, fillcolor=white
]
"s1085" [
label="s1085: Int = s1081.Col.length()"
shape=box, color=darkblue, tooltip="s1085:Int", style=filled, fillcolor=white
]
"s1087" [
label="s1087: Int = s1086 * s1085"
shape=box, color=gray, tooltip="s1087:Int", style=filled, fillcolor=white
]
"s1088" [
label="s1088: Int = s1083 + s1087"
shape=box, color=gray, tooltip="s1088:Int", style=filled, fillcolor=white
]
"s1231" [
label="s1231: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s1088, s1088), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s1231:Col[Int]", style=filled, fillcolor=white
]
"s1233" [
label="s1233: Int = s1231.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s1233:Int", style=filled, fillcolor=white
]
"s1236" [
label="s1236: Int = CostOf(OR_per_item:(Col[SBoolean]) => SBoolean)"
shape=box, color=gray, tooltip="s1236:Int", style=filled, fillcolor=white
]
"s1235" [
label="s1235: Int = s1231.Col.length()"
shape=box, color=darkblue, tooltip="s1235:Int", style=filled, fillcolor=white
]
"s1237" [
label="s1237: Int = s1236 * s1235"
shape=box, color=gray, tooltip="s1237:Int", style=filled, fillcolor=white
]
"s1238" [
label="s1238: Int = s1233 + s1237"
shape=box, color=gray, tooltip="s1238:Int", style=filled, fillcolor=white
]
"s4163" [
label="s4163: Int = CostOf(SizeOf:(Col[IV]) => SInt)"
shape=box, color=gray, tooltip="s4163:Int", style=filled, fillcolor=white
]
"s4127" [
label="s4127: Int = s39.CostModel.AccessBox()"
shape=box, color=darkblue, tooltip="s4127:Int", style=filled, fillcolor=white
]
"s4168" [
label="s4168: Int = CostOf(Const:() => SInt)"
shape=box, color=gray, tooltip="s4168:Int", style=filled, fillcolor=white
]
"s139" [
label="s139: Long = TypeSize(SByte)"
shape=box, color=gray, tooltip="s139:Long", style=filled, fillcolor=white
]
"s10445" [
label="s10445: Int = Const(65536)"
shape=box, color=gray, tooltip="s10445:Int", style=filled, fillcolor=white
]
"s10510" [
label="s10510: Long = ToLong s10445"
shape=box, color=gray, tooltip="s10510:Long", style=filled, fillcolor=white
]
"s10511" [
label="s10511: Long = s139 * s10510"
shape=box, color=gray, tooltip="s10511:Long", style=filled, fillcolor=white
]
"s10461" [
label="s10461: Int = s10456.Col.length()"
shape=box, color=darkblue, tooltip="s10461:Int", style=filled, fillcolor=white
]
"s10524" [
label="s10524: Long = ToLong s10461"
shape=box, color=gray, tooltip="s10524:Long", style=filled, fillcolor=white
]
"s10525" [
label="s10525: Long = s139 * s10524"
shape=box, color=gray, tooltip="s10525:Long", style=filled, fillcolor=white
]
"s10526" [
label="s10526: Long = s10511 + s10525"
shape=box, color=gray, tooltip="s10526:Long", style=filled, fillcolor=white
]
"s453" [
label="s453: Long = Const(1024l)"
shape=box, color=gray, tooltip="s453:Long", style=filled, fillcolor=white
]
"s10528" [
label="s10528: Long = s10526 / s453"
shape=box, color=gray, tooltip="s10528:Long", style=filled, fillcolor=white
]
"s10529" [
label="s10529: Int = s10528.toInt"
shape=box, color=gray, tooltip="s10529:Int", style=filled, fillcolor=white
]
"s456" [
label="s456: Int = CostOf(EQ_per_kb:(T,T) => SBoolean)"
shape=box, color=gray, tooltip="s456:Int", style=filled, fillcolor=white
]
"s10531" [
label="s10531: Int = s10529 * s456"
shape=box, color=gray, tooltip="s10531:Int", style=filled, fillcolor=white
]
"s178" [
label="s178: Int = CostOf(Const:() => Col[IV])"
shape=box, color=gray, tooltip="s178:Int", style=filled, fillcolor=white
]
subgraph cluster_s11428 {
style=dashed; color="#FFCCFF"
"s11426" [
label="s11426: Context"
shape=oval, color=gray, tooltip="s11426:Context", style=filled, fillcolor=white
]
"s11428" [
label="s11428: Context => Int = s11426 => s11967 + s11971"
shape=box, color=magenta, tooltip="s11428:Context => Int", style=filled, fillcolor=white
]
{rank=source; s11426}
"s11434" [
label="s11434: Col[Box] = s11426.Context.INPUTS()"
shape=box, color=darkblue, tooltip="s11434:Col[Box]", style=filled, fillcolor=white
]
"s11436" [
label="s11436: Int = s11434.Col.length()"
shape=box, color=darkblue, tooltip="s11436:Int", style=filled, fillcolor=white
]
"s11473" [
label="s11473: Int = s4127 * s11436"
shape=box, color=gray, tooltip="s11473:Int", style=filled, fillcolor=white
]
"s11474" [
label="s11474: Int = s4141 + s11473"
shape=box, color=gray, tooltip="s11474:Int", style=filled, fillcolor=white
]
"s11476" [
label="s11476: Int = s11474 + s4163"
shape=box, color=gray, tooltip="s11476:Int", style=filled, fillcolor=white
]
"s11485" [
label="s11485: Int = s11476 + s4168"
shape=box, color=gray, tooltip="s11485:Int", style=filled, fillcolor=white
]
"s11539" [
label="s11539: Int = s11474 + s4168"
shape=box, color=gray, tooltip="s11539:Int", style=filled, fillcolor=white
]
"s11541" [
label="s11541: Int = s11539 + s4226"
shape=box, color=gray, tooltip="s11541:Int", style=filled, fillcolor=white
]
"s11549" [
label="s11549: Int = s11541 + s10446"
shape=box, color=gray, tooltip="s11549:Int", style=filled, fillcolor=white
]
"s11599" [
label="s11599: Int = s11549 + s178"
shape=box, color=gray, tooltip="s11599:Int", style=filled, fillcolor=white
]
"s11634" [
label="s11634: Int = s11599 + s10531"
shape=box, color=gray, tooltip="s11634:Int", style=filled, fillcolor=white
]
"s11965" [
label="s11965: Col[Int] =\ls3.ColBuilder.fromItems(Vector(s11485, s11634, s1238), anon$7<Int>)\l"
shape=box, color=darkblue, tooltip="s11965:Col[Int]", style=filled, fillcolor=white
]
"s11967" [
label="s11967: Int = s11965.Col.sum(s12)"
shape=box, color=darkblue, tooltip="s11967:Int", style=filled, fillcolor=white
]
"s11969" [
label="s11969: Int = s11965.Col.length()"
shape=box, color=darkblue, tooltip="s11969:Int", style=filled, fillcolor=white
]
"s11971" [
label="s11971: Int = s1086 * s11969"
shape=box, color=gray, tooltip="s11971:Int", style=filled, fillcolor=white
]
{rank=sink; s11428}
}
"s11975" [
label="s11975: (Context => SigmaProp, Context => Int) = (s10871, s11428)"
shape=box, color=gray, tooltip="s11975:(Context => SigmaProp, Context => Int)", style=filled, fillcolor=white
]
"s1236" -> "s1237" [style=solid]
"s1235" -> "s1237" [style=solid]
"s1081" -> "s1083" [style=solid]
"s12" -> "s1083" [style=solid]
"s28" -> "s11409" [style=solid]
"s11408" -> "s11409" [style=solid]
"s11476" -> "s11485" [style=solid]
"s4168" -> "s11485" [style=solid]
"s10990" -> "s11014" [style=solid]
"s10456" -> "s11014" [style=solid]
"s1231" -> "s1233" [style=solid]
"s12" -> "s1233" [style=solid]
"s139" -> "s10511" [style=solid]
"s10510" -> "s10511" [style=solid]
"s11541" -> "s11549" [style=solid]
"s10446" -> "s11549" [style=solid]
"s11434" -> "s11436" [style=solid]
"s4127" -> "s11473" [style=solid]
"s11436" -> "s11473" [style=solid]
"s1086" -> "s1087" [style=solid]
"s1085" -> "s1087" [style=solid]
"s39" -> "s4141" [style=solid]
"s11174" -> "s11344" [style=solid]
"s1047" -> "s11344" [style=solid]
"s10869" -> "s10871" [style=dashed, color=lightgray, weight=0]
"s11410" -> "s10871" [style=solid]
"s11391" -> "s10871" [style=solid]
"s1086" -> "s11971" [style=solid]
"s11969" -> "s11971" [style=solid]
"s3" -> "s11408" [style=solid]
"s10928" -> "s11408" [style=solid]
"s11014" -> "s11408" [style=solid]
"s10648" -> "s10652" [style=solid]
"s1062" -> "s1067" [style=solid]
"s1066" -> "s1067" [style=solid]
"s11409" -> "s11410" [style=solid]
"s10968" -> "s10990" [style=solid]
"s11599" -> "s11634" [style=solid]
"s10531" -> "s11634" [style=solid]
"s1233" -> "s1238" [style=solid]
"s1237" -> "s1238" [style=solid]
"s11142" -> "s11174" [style=solid]
"s39" -> "s324" [style=solid]
"s10528" -> "s10529" [style=solid]
"s11219" -> "s11221" [style=solid]
"s10652" -> "s11221" [style=solid]
"s10526" -> "s10528" [style=solid]
"s453" -> "s10528" [style=solid]
"s10877" -> "s10968" [style=solid]
"s11" -> "s10968" [style=solid]
"s3" -> "s11965" [style=solid]
"s11485" -> "s11965" [style=solid]
"s11634" -> "s11965" [style=solid]
"s1238" -> "s11965" [style=solid]
"s10968" -> "s11142" [style=solid]
"s695" -> "s11142" [style=solid]
"s3" -> "s1231" [style=solid]
"s1088" -> "s1231" [style=solid]
"s1088" -> "s1231" [style=solid]
"s4141" -> "s11474" [style=solid]
"s11473" -> "s11474" [style=solid]
"s10877" -> "s10879" [style=solid]
"s10445" -> "s10510" [style=solid]
"s10461" -> "s10524" [style=solid]
"s11474" -> "s11539" [style=solid]
"s4168" -> "s11539" [style=solid]
"s11426" -> "s11434" [style=solid]
"s10456" -> "s10461" [style=solid]
"s139" -> "s10525" [style=solid]
"s10524" -> "s10525" [style=solid]
"s11" -> "s12" [style=solid]
"s39" -> "s4127" [style=solid]
"s28" -> "s39" [style=solid]
"s11174" -> "s11190" [style=solid]
"s1047" -> "s11190" [style=solid]
"s11373" -> "s11375" [style=solid]
"s10800" -> "s11375" [style=solid]
"s3" -> "s10456" [style=solid]
"s10455" -> "s10456" [style=solid]
"s3" -> "s1081" [style=solid]
"s1052" -> "s1081" [style=solid]
"s1067" -> "s1081" [style=solid]
"s28" -> "s11391" [style=solid]
"s11390" -> "s11391" [style=solid]
"s11426" -> "s11428" [style=dashed, color=lightgray, weight=0]
"s11967" -> "s11428" [style=solid]
"s11971" -> "s11428" [style=solid]
"s1231" -> "s1235" [style=solid]
"s1081" -> "s1085" [style=solid]
"s11965" -> "s11969" [style=solid]
"s11965" -> "s11967" [style=solid]
"s12" -> "s11967" [style=solid]
"s10529" -> "s10531" [style=solid]
"s456" -> "s10531" [style=solid]
"s324" -> "s1052" [style=solid]
"s48" -> "s1052" [style=solid]
"s10511" -> "s10526" [style=solid]
"s10525" -> "s10526" [style=solid]
"s11539" -> "s11541" [style=solid]
"s4226" -> "s11541" [style=solid]
"s10879" -> "s10928" [style=solid]
"s10378" -> "s10928" [style=solid]
"s11549" -> "s11599" [style=solid]
"s178" -> "s11599" [style=solid]
"s11190" -> "s11219" [style=solid]
"s10871" -> "s11975" [style=solid]
"s11428" -> "s11975" [style=solid]
"s3" -> "s11390" [style=solid]
"s11221" -> "s11390" [style=solid]
"s11375" -> "s11390" [style=solid]
"s11474" -> "s11476" [style=solid]
"s4163" -> "s11476" [style=solid]
"s10869" -> "s10877" [style=solid]
"s11344" -> "s11373" [style=solid]
"s10796" -> "s10800" [style=solid]
"s1083" -> "s1088" [style=solid]
"s1087" -> "s1088" [style=solid]
}
