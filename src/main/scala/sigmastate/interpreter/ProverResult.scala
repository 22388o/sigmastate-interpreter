package sigmastate.interpreter

import java.util

import sigmastate.serialization.SigmaSerializer
import sigmastate.utils.{SigmaByteReader, SigmaByteWriter}

/**
  * Proof generated by a prover along with possible context extensions
  */
class ProverResult(val proof: Array[Byte], val extension: ContextExtension) {
  override def hashCode(): Int = util.Arrays.hashCode(proof) * 31 + extension.hashCode()

  override def equals(obj: scala.Any): Boolean = obj match {
    case obj: ProverResult =>
      util.Arrays.equals(proof, obj.proof) && extension == obj.extension
    case _ => false
  }
}

object ProverResult {
  val empty: ProverResult = ProverResult(Array[Byte](), ContextExtension.empty)

  def apply(proof: Array[Byte], extension: ContextExtension): ProverResult =
    new ProverResult(proof, extension)

  object serializer extends SigmaSerializer[ProverResult, ProverResult] {

    override def serialize(obj: ProverResult, w: SigmaByteWriter): Unit = {
      w.putUShort(obj.proof.length)
      w.putBytes(obj.proof)
      ContextExtension.serializer.serialize(obj.extension, w)
    }

    override def parse(r: SigmaByteReader): ProverResult = {
      val sigBytesCount = r.getUShort()
      val proofBytes = r.getBytes(sigBytesCount)
      val ce = ContextExtension.serializer.parse(r)
      ProverResult(proofBytes, ce)
    }
  }

}


case class CostedProverResult(override val proof: Array[Byte],
                              override val extension: ContextExtension,
                              cost: Long) extends ProverResult(proof, extension)
