package sigmastate

import sigmastate.lang.SigmaPredef.PredefinedFuncRegistry
import sigmastate.lang.StdSigmaBuilder

/** WARNING: This file is generated by GenSerializableOps tool.
  * Don't edit it directly, use the tool instead to regenerate.
  * The operations are alphabetically sorted.
  */
object Operations {
  val predefinedOps = new PredefinedFuncRegistry(StdSigmaBuilder)

  object ANDInfo {
    private val func = predefinedOps.funcs("allOf")
    val conditionsArg: ArgInfo = func.argInfo("conditions")
  }

  object AppendInfo {
    private val method = SMethod.fromIds(12, 9)
    val thisArg: ArgInfo = method.argInfo("this")
    val otherArg: ArgInfo = method.argInfo("other")
  }

  object AtLeastInfo {
    private val func = predefinedOps.funcs("atLeast")
    val boundArg: ArgInfo = func.argInfo("bound")
    val childrenArg: ArgInfo = func.argInfo("children")
  }

  object BoolToSigmaPropInfo {
    private val func = predefinedOps.funcs("sigmaProp")
    val conditionArg: ArgInfo = func.argInfo("condition")
  }

  object ByIndexInfo {
    private val method = SMethod.fromIds(12, 2)
    val thisArg: ArgInfo = method.argInfo("this")
    val indexArg: ArgInfo = method.argInfo("index")
    val defaultArg: ArgInfo = method.argInfo("default")
  }

  object ByteArrayToBigIntInfo {
    private val func = predefinedOps.funcs("byteArrayToBigInt")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object ByteArrayToLongInfo {
    private val func = predefinedOps.funcs("byteArrayToLong")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object CalcBlake2b256Info {
    private val func = predefinedOps.funcs("blake2b256")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object CalcSha256Info {
    private val func = predefinedOps.funcs("sha256")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object CreateAvlTreeInfo {
    private val func = predefinedOps.funcs("avlTree")
    val operationFlagsArg: ArgInfo = func.argInfo("operationFlags")
    val digestArg: ArgInfo = func.argInfo("digest")
    val keyLengthArg: ArgInfo = func.argInfo("keyLength")
    val valueLengthOptArg: ArgInfo = func.argInfo("valueLengthOpt")
  }

  object CreateProveDHTupleInfo {
    private val func = predefinedOps.funcs("proveDHTuple")
    val gArg: ArgInfo = func.argInfo("g")
    val hArg: ArgInfo = func.argInfo("h")
    val uArg: ArgInfo = func.argInfo("u")
    val vArg: ArgInfo = func.argInfo("v")
  }

  object CreateProveDlogInfo {
    private val func = predefinedOps.funcs("proveDlog")
    val valueArg: ArgInfo = func.argInfo("value")
  }

  object DecodePointInfo {
    private val func = predefinedOps.funcs("decodePoint")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object DeserializeContextInfo {
    private val func = predefinedOps.funcs("executeFromVar")
    val idArg: ArgInfo = func.argInfo("id")
  }

  object ExistsInfo {
    private val method = SMethod.fromIds(12, 4)
    val thisArg: ArgInfo = method.argInfo("this")
    val pArg: ArgInfo = method.argInfo("p")
  }

  object ExponentiateInfo {
    private val method = SMethod.fromIds(7, 3)
    val thisArg: ArgInfo = method.argInfo("this")
    val kArg: ArgInfo = method.argInfo("k")
  }

  object ExtractAmountInfo {
    private val method = SMethod.fromIds(99, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object ExtractBytesInfo {
    private val method = SMethod.fromIds(99, 3)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object ExtractBytesWithNoRefInfo {
    private val method = SMethod.fromIds(99, 4)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object ExtractCreationInfoInfo {
    private val method = SMethod.fromIds(99, 6)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object ExtractIdInfo {
    private val method = SMethod.fromIds(99, 5)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object ExtractRegisterAsInfo {
    private val method = SMethod.fromIds(99, 7)
    val thisArg: ArgInfo = method.argInfo("this")
    val regIdArg: ArgInfo = method.argInfo("regId")
  }

  object ExtractScriptBytesInfo {
    private val method = SMethod.fromIds(99, 2)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object FilterInfo {
    private val method = SMethod.fromIds(12, 8)
    val thisArg: ArgInfo = method.argInfo("this")
    val pArg: ArgInfo = method.argInfo("p")
  }

  object FoldInfo {
    private val method = SMethod.fromIds(12, 5)
    val thisArg: ArgInfo = method.argInfo("this")
    val zeroArg: ArgInfo = method.argInfo("zero")
    val opArg: ArgInfo = method.argInfo("op")
  }

  object ForAllInfo {
    private val method = SMethod.fromIds(12, 6)
    val thisArg: ArgInfo = method.argInfo("this")
    val pArg: ArgInfo = method.argInfo("p")
  }

  object GetVarInfo {
    private val func = predefinedOps.funcs("getVar")
    val varIdArg: ArgInfo = func.argInfo("varId")
  }

  object GroupGeneratorInfo {
    private val method = SMethod.fromIds(106, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object LongToByteArrayInfo {
    private val func = predefinedOps.funcs("longToByteArray")
    val inputArg: ArgInfo = func.argInfo("input")
  }

  object MapCollectionInfo {
    private val method = SMethod.fromIds(12, 3)
    val thisArg: ArgInfo = method.argInfo("this")
    val fArg: ArgInfo = method.argInfo("f")
  }

  object MethodCallInfo {
    private val method = SMethod.fromIds(6, 4)
    val thisArg: ArgInfo = method.argInfo("this")
    val otherArg: ArgInfo = method.argInfo("other")
  }

  object MinusModQInfo {
    private val method = SMethod.fromIds(6, 3)
    val thisArg: ArgInfo = method.argInfo("this")
    val otherArg: ArgInfo = method.argInfo("other")
  }

  object ModQInfo {
    private val method = SMethod.fromIds(6, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object MultiplyGroupInfo {
    private val method = SMethod.fromIds(7, 4)
    val thisArg: ArgInfo = method.argInfo("this")
    val otherArg: ArgInfo = method.argInfo("other")
  }

  object ORInfo {
    private val func = predefinedOps.funcs("anyOf")
    val conditionsArg: ArgInfo = func.argInfo("conditions")
  }

  object OptionGetInfo {
    private val method = SMethod.fromIds(36, 3)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object OptionGetOrElseInfo {
    private val method = SMethod.fromIds(36, 4)
    val thisArg: ArgInfo = method.argInfo("this")
    val defaultArg: ArgInfo = method.argInfo("default")
  }

  object OptionIsDefinedInfo {
    private val method = SMethod.fromIds(36, 2)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object PlusModQInfo {
    private val method = SMethod.fromIds(6, 2)
    val thisArg: ArgInfo = method.argInfo("this")
    val otherArg: ArgInfo = method.argInfo("other")
  }

  object PropertyCallInfo {
    private val method = SMethod.fromIds(1, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object SigmaPropBytesInfo {
    private val method = SMethod.fromIds(8, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object SizeOfInfo {
    private val method = SMethod.fromIds(12, 1)
    val thisArg: ArgInfo = method.argInfo("this")
  }

  object SliceInfo {
    private val method = SMethod.fromIds(12, 7)
    val thisArg: ArgInfo = method.argInfo("this")
    val fromArg: ArgInfo = method.argInfo("from")
    val untilArg: ArgInfo = method.argInfo("until")
  }

  object SubstConstantsInfo {
    private val func = predefinedOps.funcs("substConstants")
    val scriptBytesArg: ArgInfo = func.argInfo("scriptBytes")
    val positionsArg: ArgInfo = func.argInfo("positions")
    val newValuesArg: ArgInfo = func.argInfo("newValues")
  }

  object XorOfInfo {
    private val func = predefinedOps.funcs("xorOf")
    val conditionsArg: ArgInfo = func.argInfo("conditions")
  }
}
